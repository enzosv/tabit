//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var UserSyncState = newUserSyncStateTable("", "user_sync_state", "")

type userSyncStateTable struct {
	sqlite.Table

	// Columns
	UserID      sqlite.ColumnString
	Data        sqlite.ColumnString
	LastUpdated sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type UserSyncStateTable struct {
	userSyncStateTable

	EXCLUDED userSyncStateTable
}

// AS creates new UserSyncStateTable with assigned alias
func (a UserSyncStateTable) AS(alias string) *UserSyncStateTable {
	return newUserSyncStateTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserSyncStateTable with assigned schema name
func (a UserSyncStateTable) FromSchema(schemaName string) *UserSyncStateTable {
	return newUserSyncStateTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserSyncStateTable with assigned table prefix
func (a UserSyncStateTable) WithPrefix(prefix string) *UserSyncStateTable {
	return newUserSyncStateTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserSyncStateTable with assigned table suffix
func (a UserSyncStateTable) WithSuffix(suffix string) *UserSyncStateTable {
	return newUserSyncStateTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserSyncStateTable(schemaName, tableName, alias string) *UserSyncStateTable {
	return &UserSyncStateTable{
		userSyncStateTable: newUserSyncStateTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newUserSyncStateTableImpl("", "excluded", ""),
	}
}

func newUserSyncStateTableImpl(schemaName, tableName, alias string) userSyncStateTable {
	var (
		UserIDColumn      = sqlite.StringColumn("user_id")
		DataColumn        = sqlite.StringColumn("data")
		LastUpdatedColumn = sqlite.IntegerColumn("last_updated")
		allColumns        = sqlite.ColumnList{UserIDColumn, DataColumn, LastUpdatedColumn}
		mutableColumns    = sqlite.ColumnList{DataColumn, LastUpdatedColumn}
		defaultColumns    = sqlite.ColumnList{}
	)

	return userSyncStateTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:      UserIDColumn,
		Data:        DataColumn,
		LastUpdated: LastUpdatedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
